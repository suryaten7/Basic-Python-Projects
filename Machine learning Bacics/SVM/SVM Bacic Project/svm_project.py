# -*- coding: utf-8 -*-
"""SVM Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tSBjbma_Io1vj45Jw1sL-IcbGqnTVLvs

#SVM PROJECT
The iris dataset contains measurements for 150 iris flowers from three different species.
"""

# The Iris Setosa
from IPython.display import Image
url = 'http://upload.wikimedia.org/wikipedia/commons/5/56/Kosaciec_szczecinkowaty_Iris_setosa.jpg'
Image(url,width=300, height=300)

# The Iris Versicolor
from IPython.display import Image
url = 'http://upload.wikimedia.org/wikipedia/commons/4/41/Iris_versicolor_3.jpg'
Image(url,width=300, height=300)

# The Iris Virginica
from IPython.display import Image
url = 'http://upload.wikimedia.org/wikipedia/commons/9/9f/Iris_virginica.jpg'
Image(url,width=300, height=300)

"""The iris dataset contains measurements for 150 iris flowers from three different species.

The three classes in the Iris dataset:

    Iris-setosa (n=50)
    Iris-versicolor (n=50)
    Iris-virginica (n=50)

The four features of the Iris dataset:

    sepal length in cm
    sepal width in cm
    petal length in cm
    petal width in cm

## Get the data

**Use seaborn to get the iris data by using: iris = sns.load_dataset('iris') **
"""

import seaborn as sns
iris = sns.load_dataset('iris')

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

iris

"""** Create a pairplot of the data set. Which flower species seems to be the most separable?**"""

sns.set_style("darkgrid")
sns.pairplot(iris,hue="species",diag_kind="hist")

"""**Create a kde plot of sepal_length versus sepal width for setosa species of flower.**"""

setosa = iris[iris["species"] == "setosa"]
sns.kdeplot(setosa["sepal_width"],setosa["sepal_length"],cmap="plasma",shade=True,shade_lowest=False)

"""# Train Test Split"""

from sklearn.model_selection import train_test_split

X=iris.drop("species",axis=1)
y=iris["species"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)

"""# Train a Model"""

from sklearn.svm import SVC

model=SVC()

model.fit(X_train,y_train)



"""## Model Evaluation

**Now get predictions from the model and create a confusion matrix and a classification report.**
"""

predictions=model.predict(X_test)

from sklearn.metrics import classification_report,confusion_matrix

confusion_matrix(y_test,predictions)

print(classification_report(y_test,predictions))

"""## Gridsearch Practice

** Import GridsearchCV from SciKit Learn.**

**Create a dictionary called param_grid and fill out some parameters for C and gamma.**
"""

from sklearn.model_selection import GridSearchCV

"""** Create a GridSearchCV object and fit it to the training data.**"""

param_grid={"C":[0.1,1,10,100,1000],
            "gamma":[1,0.1,0.01,0.001,0.0001]}

grid=GridSearchCV(SVC(),param_grid,verbose=3)

grid.fit(X_train,y_train)

grid.best_params_

grid.best_estimator_

grid_predict=grid.predict(X_test)

print(confusion_matrix(y_test,grid_predict))

print(classification_report(y_test,grid_predict))