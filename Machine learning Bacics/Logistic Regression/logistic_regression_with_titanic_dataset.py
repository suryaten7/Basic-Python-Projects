# -*- coding: utf-8 -*-
"""Logistic Regression with Titanic dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uI80b2ceNLU15L-g-AeaU3FTh2LCpWKe
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

from google.colab import files

uploaded = files.upload()

train=pd.read_csv("titanic_train.csv")

train.head()

train.isnull()

sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap="viridis")

sns.set_style("whitegrid")

sns.countplot(x="Survived",data=train)

sns.countplot(x="Survived",hue="Sex",data=train)

sns.countplot(x="Survived",hue="Pclass",data=train)

sns.distplot(train["Age"].dropna(),kde=False,bins=30)

train["Age"].plot.hist(bins=30)

sns.countplot(x="SibSp",data=train)

train["Fare"].hist(bins=40,figsize=(10,4))

#same kind of visualization with cufflinks
import cufflinks as cf

cf.go_offline()

train["Fare"].iplot(kind="hist",bins=30)

plt.figure(figsize=(14,8))
sns.boxplot(x="Pclass",y="Age",data=train)

#using function to fill the missing values
def impute_age(cols):
    Age=cols[0]
    Pclass=cols[1]
    if pd.isnull(Age):
        if Pclass==1:
            return 37
        elif Pclass==2:
            return 29
        else:
            return 27
    else:
        return Age

train["Age"]=train[["Age","Pclass"]].apply(impute_age,axis=1)

train["Age"]

sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap="viridis")

#Drop unwanted column
train.drop("Cabin",axis=1,inplace=True)

sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap="viridis")

train.dropna(inplace=True)

#create dummies
sex = pd.get_dummies(train['Sex'],drop_first=True)

embark = pd.get_dummies(train['Embarked'],drop_first=True)

train = pd.concat([train,sex,embark],axis=1)

train.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)

train.head()

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(train.drop('Survived',axis=1), 
                                                    train['Survived'], test_size=0.30, 
                                                    random_state=101)

from sklearn.linear_model import LogisticRegression

logmodel = LogisticRegression()
logmodel.fit(X_train,y_train)

predictions = logmodel.predict(X_test)

from sklearn.metrics import classification_report

print(classification_report(y_test,predictions))

from sklearn.metrics import confusion_matrix

confusion_matrix(y_test,predictions)

