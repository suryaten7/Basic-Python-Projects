# -*- coding: utf-8 -*-
"""K Nearest Neighbors Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mfTcq5G_launrP82Xa_Y6G5rVKIQbyCw

# K Nearest Neighbors Project 

.
## Import Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

"""## Get the Data
** Read the 'KNN_Project_Data csv file into a dataframe **
"""

from google.colab import files
files.upload()

dataframe=pd.read_csv("KNN_Project_Data")
dataframe.head()

"""**Check the head of the dataframe.**

# EDA

Since this data is artificial, we'll just do a large pairplot with seaborn.

**Use seaborn on the dataframe to create a pairplot with the hue indicated by the TARGET CLASS column.**
"""

sns.pairplot(dataframe,hue="TARGET CLASS",diag_kind="hist",palette="coolwarm")

from  sklearn.preprocessing import StandardScaler

scaler=StandardScaler()

scaler.fit(dataframe.drop("TARGET CLASS",axis=1))

scaled_features=scaler.transform(dataframe.drop("TARGET CLASS",axis=1))

df_feat=pd.DataFrame(scaled_features,columns=dataframe.columns[:-1])
df_feat.head()

"""# Train Test Split"""

from sklearn.model_selection import train_test_split

X=df_feat
y=dataframe["TARGET CLASS"]
X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.30, random_state=101)

from sklearn.neighbors import KNeighborsClassifier

"""**n_neighbors=1**"""

knn=KNeighborsClassifier(n_neighbors=1)

knn.fit(X_train,y_train)

pred=knn.predict(X_test)

from sklearn.metrics import classification_report,confusion_matrix

print(confusion_matrix(y_test,pred))

print(classification_report(y_test,pred))

"""# Choosing a K Value"""

error_rate=[]
for i in range(1,40):
    knn=KNeighborsClassifier(n_neighbors=i)
    knn.fit(X_train,y_train)
    pred_i=knn.predict(X_test)
    error_rate.append(np.mean(pred_i!= y_test))

plt.figure(figsize=(10,6))
plt.plot(range(1,40),error_rate,ls="--",color="blue",marker="o",markerfacecolor="red",markersize=10)

knn=KNeighborsClassifier(n_neighbors=30)
knn.fit(X_train,y_train)
pred=knn.predict(X_test)
print("WITH K=30")
print(classification_report(y_test,pred))
print("\n")
print(confusion_matrix(y_test,pred))

