# -*- coding: utf-8 -*-
"""keras basic regression .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11h3VptAkZbaYWy3Afa3o19Drn5EVQmLo
"""

import pandas as pd

from google.colab import files
files.upload()

df = pd.read_csv('fake_reg.csv')

df.head()

import seaborn as sns
import matplotlib.pyplot as plt

sns.pairplot(df)

"""### Test/Train Split"""

from sklearn.model_selection import train_test_split

X = df[['feature1','feature2']].values

y = df['price'].values


X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=42)

X_train.shape

X_test.shape

from sklearn.preprocessing import MinMaxScaler

help(MinMaxScaler)

scaler = MinMaxScaler()

scaler.fit(X_train)

X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

import tensorflow as tf

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

model = Sequential()

model.add(Dense(4,activation='relu'))
model.add(Dense(4,activation='relu'))
model.add(Dense(4,activation='relu'))
model.add(Dense(1))
model.compile(optimizer='rmsprop',loss='mse')

model.fit(X_train,y_train,epochs=250)

model.history.history

loss = model.history.history['loss']

sns.lineplot(x=range(len(loss)),y=loss)
plt.title("Training Loss per Epoch");

training_score = model.evaluate(X_train,y_train,verbose=0)
test_score = model.evaluate(X_test,y_test,verbose=0)

training_score

test_score

test_predictions = model.predict(X_test)

test_predictions

pred_df = pd.DataFrame(y_test,columns=['Test Y'])

pred_df

test_predictions = pd.Series(test_predictions.reshape(300,))

test_predictions

pred_df = pd.concat([pred_df,test_predictions],axis=1)

pred_df.columns = ['Test Y','Model Predictions']

pred_df

sns.scatterplot(x='Test Y',y='Model Predictions',data=pred_df)

from sklearn.metrics import mean_absolute_error,mean_squared_error

mean_absolute_error(pred_df['Test Y'],pred_df['Model Predictions'])

mean_squared_error(pred_df['Test Y'],pred_df['Model Predictions'])

#RMSE
mean_squared_error(pred_df['Test Y'],pred_df['Model Predictions'])**0.5

# [[Feature1, Feature2]]
new_gem = [[998,1000]]

# Don't forget to scale!
scaler.transform(new_gem)

new_gem = scaler.transform(new_gem)

model.predict(new_gem)

"""## Saving and Loading a Model"""

from tensorflow.keras.models import load_model

model.save('keras basic regression model.h5')

from google.colab import files
files.download('keras basic regression model.h5')

later_model = load_model('keras basic regression model.h5')

later_model.predict(new_gem)